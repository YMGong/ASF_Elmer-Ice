!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Test GlaDS solvers              !!
!!                                 !!
!! Olivier Gagliardini June 2017   !!
!!                                 !!
!! SHMIP - test B5                 !!
!!                                 !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


check keywords warn
!echo on

$Bnum = "B5"
$namerun = "glads_3d_seasonalFlux_2mmperyrmelt_offline_surge"
!$namerun = "test_baseline"
$namerestart = "glads_3d_seasonalFlux_2mmperyrmelt_coulomb"
$path_volicities = "./velocities_offlinesurging/"
! All Units are in m, year, MPa
! For ice flow 

$yearindays = 365.00 
$yearinsec = yearindays*24*60*60
$yearinhour = yearindays*24
$MPainPa = 1.0e6 

$Iter = 365!365*24.0  ! run for one year
$dtIni = 1/yearindays !daily  
$dtMin = 0.01/yearindays
$OutPut = 1!24
$restartPo=155


$ function tangentialupdate(X) import dtIni{\
   _tangentialupdate = X(0) + X(1) * dtIni;\
}

!a linearly down sloping bed with 0.0 degree sloping 
$ function Hb(x) {\
  alpha= 0.0*(pi/180.0);\ 
  _Hb  = tan(alpha)*x ;\
}

! geometry according to Katja's thesis
! added a minimum height 
$Hmin = 1.0
$ function H(x) \
  import Hmin {\
  _H  = 4.0*(sqrt(x))+Hmin ;\
}

$hourinseconds= 60.0*60.0
$ev = 0.0 
$Source = 2.0e-3*yearindays    ! 2 mm d-1 ->  m year-1, the basal melt source, should have the same unit of the sheet opening velocity
$MBasal = 1.0e-3/yearindays !1.0e-3 m year-1 -> m hour-1 to be used in the seasonal_signal function
$TuningFactor_moulin = (540.0/yearinhour)*yearinsec  !just a convertion factor in the seasonal_signal function to bring the mean influx to 20m3/s then convert to m3/year in the function
$TuningFactor_melt = 1.0
! Common input parameters for all tests SHMIP 


$ub = 3.17e-6*yearinsec        !(1.0e-6 m/s)

!Prefactor from Cuffey and Paterson (2010) in MPa^{-3} a^{-1}
! temperate Ice (power law for SSA)
$rhoi = 910.0/(MPainPa*yearinsec^2) 
$rhow = 1000.0/(MPainPa*yearinsec^2) 
$A1 = 2.89165e-13*yearinsec*MPainPa^3
$A2 = 2.42736e-02*yearinsec*MPainPa^3

$ng = 3.0
$Aglen = 2.5e-25*yearinsec*MPainPa^3
$eta = (2.0*Aglen)^(-1.0/ng)

$gravity = 9.80*yearinsec^2  

! For the sheet
$Ar = Aglen
$alphas = 1.25 
$betas = 1.5 
$lr = 2.0 
$hr = 0.05 
$Ks = 0.0005*yearinsec*(1.0/MPainPa)^(1.0-betas) !old value is 0.0005 Conductivity sheet: test case number 0.005*...
$Hs = 0.05 ! IC for h

! For the Channels
$alphac = 1.25 
$betac = 1.5 
$Kc = 0.1*yearinsec*(1.0/MPainPa)^(1.0-betac) 
$Ac = Aglen  
$lc = 2.0 
$Ct = -7.5e-8*MPainPa 
$Cw = 4220.0*yearinsec^2
$Lw = 334000.0*yearinsec^2

$lakelevel = 300 ! just trying 
!! water pressure at ice dam
$ function waterpressure(Z) \
  import lakelevel {\
  rhow = 1012.0;\
  waterline = lakelevel;\
  G = 9.81;\
  _waterpressure = 0.0;\
  if (Z>waterline) {\
       _waterpressure = 0.0;\
  }else {\
       _waterpressure = 1.0 * rhow * G * (waterline - Z);\
  }\
}

! For the Moulins
$Am = 2.0e5	! moulin area huge = a lake
$Linput = 20.0*yearinsec	! flux from the moulin/lake: 0-110 m3 s-1 -> m3 year-1 constant

! Definition of the sqrt geometry 
! for SHMIP A, B, C, D

!$Hmin = 1.0
!$ function H(x) \
!  import Hmin {\
!  _H  = 4.0*(sqrt(x))+Hmin ;\
!}
! Prefactor from Cuffey and Paterson (2010) in MPa^{-3} a^{-1}
$GA1 = 1.258e13 
$GA2 = 6.046e28 
$Q1 = 60.0e3
$Q2 = 139e3

! for side wall sliding - sliding coefficient
$Cfriction = 10^-2.0

! water pressue

$ function gethydropressure(Pw) {\
  P = Pw;\
  if (P<0.0) P=0.0;\
  _gethydropressure=P;\
}

Header
  Mesh DB "." "toy_sidemouline_GLADS_res100"
End

!---------------------------------------------------
!---------------- CONSTANTS ------------------------
!---------------------------------------------------

Constants
  Latent Heat = Real $Lw
  Gravity Norm = Real $gravity
  Water Density = Real $rhow
  Ice Density = Real $rhoi
  Sheet Thickness Variable Name = String "Sheet Thickness"
  !Hydraulic Potential Variable Name = String "Hydraulic Potential"
  Channel Area Variable Name = String "Channel Area"
  Bedrock Variable Name = String "Zb"
  Gas Constant = Real 8.314 !Joule/mol x  K 
End

!---------------------------------------------------
!---------------- SIMULATION -----------------------
!---------------------------------------------------

Simulation

  !Restart File = "$namerestart".result"
  !Restart Position = $restartPo
  !Restart Before Initial Conditions = Logical False
  Coordinate System  = Cartesian 3D 
  Simulation Type = transient
  !Simulation Type = Steady 
  Timestepping Method = "bdf"
  BDF Order = 1

  Timestep Intervals(1) = $Iter
  Output Intervals(1) = $OutPut
  Timestep Sizes(1) = $dtIni 

  Steady State Max Iterations = 2 
  Steady State Min Iterations = 1
  
  Extruded Mesh Levels = Integer 10
  !Preserve Edges = Logical True
  ! for preservaing the 101 moulin element
  !Preserve Baseline =  Logical True
  
  Output File = "$namerun".result"
  Post File = "$namerun".vtu"
 !!!!!for restarting
  Output Global Variables = Logical True
  Binary Output = True
  Initialize Dirichlet Condition = Logical False
  Skip Halo Elements = Logical True

  max output level = 3
  
End

!---------------------------------------------------
!---------------- BODIES ---------------------------
!---------------------------------------------------

! This body is located at the ice/bed interface and will be used to solve 
! the sheet equation
Body 1
  Name= "Ice"
  Equation = 1
  Material = 1
  Body Force = 1
  Initial Condition = 1
End

Body 2
  Name= "sheet"
  Equation = 2
  Material = 1
  !Body Force = 2
  Initial Condition = 1
End

Body 3
  Name = "Surf"
  Equation = 3
  Body Force = 2
  Initial Condition = 2
  Material = 1
End



!---------------------------------------------------
!---------------- INITIAL CONDITIONS ---------------
!---------------------------------------------------

!! for the sheet and ice
Initial Condition 1
  Sheet Thickness = Real $Hs
  Zs = Variable Coordinate 1
    Real MATC "H(tx) + Hb(tx)" !add a down sloping bed
  Zb = Variable Coordinate 1
    Real MATC "Hb(tx)"
  !FS = Variable Coordinate 1
  !  Real MATC "H(tx)"
  Effective Pressure = Variable Coordinate 1
     Real MATC "rhoi*gravity*H(tx)"
  !Pressure = Real 0.0
  !Stress 1 = Real 0.0
  ! initialize with hydrostatic stress (<0)
  !Stress 3 = Variable Coordinate 1
  !  Real MATC "-1.0*rhoi*gravity*H(tx)"
  !Stress 2 = Real 0.0
  !Stress 4 = Real 0.0
  !Stress 5 = Real 0.0
  !Stress 6 = Real 0.0

  Velocity 1 = Real 0.0
  Velocity 2 = Real 0.0
  Velocity 3 = Real 0.0

  Mesh Velocity 1 = Real 0.0
  Mesh Velocity 2 = Real 0.0
  Mesh Velocity 3 = Real 0.0
  Mesh Update 1 = Real 0.0
  Mesh Update 2 = Real 0.0
  Mesh Update 3 = Real 0.0
End
Initial Condition 2
! this sets the initial position of the free surface variable
 FS = Variable Coordinate 1
    Real MATC "H(tx) + Hb(tx)"
! and this the reference to this initial condition
 ReferenceFS = Variable Coordinate 1
    Real MATC "H(tx) + Hb(tx)"
  Mesh Velocity 1 = Real 0.0
  Mesh Velocity 2 = Real 0.0
  Mesh Velocity 3 = Real 0.0
  Mesh Update 1 = Real 0.0
  Mesh Update 2 = Real 0.0
  Mesh Update 3 = Real 0.0
  
End
!---------------------------------------------------
!---------------- BODY FORCES ----------------------
!---------------------------------------------------

! source 1 cm/day
Body Force 1
  !Hydraulic Potential Volume Source = Real $Source
  Flow BodyForce 1 = Real 0.0                          
  Flow BodyForce 2 = Real 0.0
  Flow BodyForce 3 = Real -$gravity 
End

Body Force 2
  FS Accumulation Flux 1 = Real 0.0e0
  FS Accumulation Flux 2 = Real 0.0e0
  FS Accumulation Flux 3 = Real 0.0e0
  !FS Accumulation Flux 3 = Variable EmergenceVelocity
  !	REAL MATC "-1.0*tx"
 !FS Accumulation = Real 0.0e0	
End
!---------------------------------------------------
!---------------- MATERIALS ------------------------
!---------------------------------------------------

!! ice material properties in MPa - m - a system 
Material 1
  Density = Real $rhoi
  
  !mesh update solver stuff (maybe not used...)
  !------------------------
  Mesh Elastic Modulus = 1.0
  Mesh Poisson Ratio = 0.3
  
  !!!!!!!!!!!!!!!!!!!!!!!!!!!
  !! GlenÂ´s flow law
  Glen Exponent = Real $ng
  Viscosity Model = String "glen"
  Viscosity = 1.0 ! Dummy but avoid warning output
    !Limit Temperature = Real -10.0
  Rate Factor 1 = Real $GA1
  Rate Factor 2 = Real $GA2
  Activation Energy 1 = Real $Q1 
  Activation Energy 2 = Real $Q2  
  Glen Enhancement Factor = Real 1.0 
  Critical Shear Rate = Real 1.0e-9
  
  ! without using the temperature solver
  Constant Temperature = Real -10.0
  ! Temperature Field Variable = Variable
  Cauchy = Logical True
  !!!!!!!!!!!!!!!!!!!!!!!!!!!
  
! For the sheet
!  MeltSource = Variable Coordinate 3, Time
!  	 Real Procedure "seasonal_signal" "seasonal_melt"
!  	 Real Procedure "functions/seasonal_signal" "seasonal_melt"
!  MoulinSource = Variable Time
!  	 Real Procedure "seasonal_signal" "seasonal_influx"
!  	 Real Procedure "functions/seasonal_signal" "seasonal_influx"
  Sheet Conductivity = Real $Ks 
  Sheet flow exponent alpha = Real $alphas
  Sheet flow exponent beta = Real $betas
  Englacial Void Ratio = Real $ev       

  !Sliding Velocity = Real $ub
  Sliding Velocity = Variable Velocity 1, Velocity 2,Velocity 3
  	   Real MATC "sqrt(tx(0)^2 + tx(1)^2 +tx(2)^2 )"

  Bedrock Bump Length = Real $lr
  Bedrock Bump High = Real $hr
  Sheet Closure Coefficient = Real $Ar 
! For the Channels
  Channel Conductivity = Real $Kc 
  Channel flow exponent alpha = Real $alphac
  Channel flow exponent beta = Real $betac
  Channel Closure Coefficient = Real $Ac
  Sheet Width Over Channel = Real $lc
  Pressure Melting Coefficient = Real $Ct
  Water Heat Capacity = Real $Cw

! For both
  Ice Normal Stress = Variable Coordinate 1
     Real MATC "rhoi*gravity*H(tx)"

!! Surface condition
  Min FS = Real $Hmin
  Max FS= Variable ReferenceFS
    Real MATC "tx(0) + 400.0"
 End

!---------------------------------------------------
!---------------- SOLVERS --------------------------
!---------------------------------------------------
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Solver 1
  !Exec Solver = Never
  Exec Solver = Before timestep
  Equation = "Pointwise Data"

  !Procedure = "ElmerIceSolvers" "InterpolatePointValue"
  Procedure = "./functions/pointwise" "InterpolatePointValue"
  Nonlinear System Max Iterations = 1  
  Variable =  -nooutput "Dummy"
  Variable DOFs = 1
  !CheckNaN = Logical True ! Default True; check is interpolation method gives NaN 

 ! IDW
  Variable DataI 1 = Integer 1
  Variable 1 = String "Effective Pressure"
  Variable Data 1 = String $path_volicities"effective_pressure_seasonalflux_2mmperyrmelt_"
  Variable Data Offset 1 = Integer 0
  Variable Data End 1 = String ".txt"
  Variable 1 Supporting Points = Integer 2 !minimum of points to be used for interpolation
  Variable 1 Dimensions = Integer 3
  Variable 1 Exponent = Real 2.0 ! inverse distance weighting exponent (has to be positive) - default 2.0
  Variable 1 Area Scaling Factor = Real 2.0 ! increases the max search distance by factor 2 of the maximum distance of dataset points
  Variable 1 Directions(3) = Integer 1 2 3 !which dimensions are these? Here direction 1 and 2 (x and y)
  Exported Variable 1 = Effective Pressure !Variablename in Elmer
  Exported Variable 1 DOFS = Integer 1!degrees of freedomd
  

  !Variable DataI 4 = Integer 1
  !Variable 4 = String "vs1"
  !Variable Data 4 = String $path_volicities"velocity_surface1_"
  !Variable Data Offset 4 = Integer 154
  !Variable Data End 4 = String ".txt"
  !Variable 4 Supporting Points = Integer 2 !minimum of points to be used for interpolation
  !Variable 4 Dimensions = Integer 2
  !Variable 4 Exponent = Real 2.0 ! inverse distance weighting exponent (has to be positive) - default 2.0
  !Variable 4 Area Scaling Factor = Real 2.0 ! increases the max search distance by factor 2 of the maximum distance of dataset points
  !Variable 4 Directions(2) = Integer 1 2!which dimensions are these? Here direction 1 and 2 (x and y)
  !Exported Variable 4 = vs1 !Variablename in Elmer
  !Exported Variable 4 DOFS = Integer 1 !degrees of freedom 

  !Variable DataI 5 = Integer 1
  !Variable 5 = String "vs2"
  !Variable Data 5 = String $path_volicities"velocity_surface2_"
  !Variable Data Offset 5 = Integer 154
  !Variable Data End 5 = String ".txt"
  !Variable 5 Supporting Points = Integer 2 !minimum of points to be used for interpolation
  !Variable 5 Dimensions = Integer 2
  !Variable 5 Exponent = Real 2.0 ! inverse distance weighting exponent (has to be positive) - default 2.0
  !Variable 5 Area Scaling Factor = Real 2.0 ! increases the max search distance by factor 2 of the maximum distance of dataset points
  !Variable 5 Directions(2) = Integer 1 2!which dimensions are these? Here direction 1 and 2 (x and y)
  !Exported Variable 5 = vs2 !Variablename in Elmer
  !Exported Variable 5 DOFS = Integer 1 !degrees of freedom 

  !Variable DataI 6 = Integer 1
  !Variable 6 = String "vs3"
  !Variable Data 6 = String $path_volicities"velocity_surface3_"
  !Variable Data Offset 6 = Integer 154
  !Variable Data End 6 = String ".txt"
  !Variable 6 Supporting Points = Integer 2 !minimum of points to be used for interpolation
  !Variable 6 Dimensions = Integer 2
  !Variable 6 Exponent = Real 2.0 ! inverse distance weighting exponent (has to be positive) - default 2.0
  !Variable 6 Area Scaling Factor = Real 2.0 ! increases the max search distance by factor 2 of the maximum distance of dataset points
  !Variable 6 Directions(2) = Integer 1 2!which dimensions are these? Here direction 1 and 2 (x and y)
  !Exported Variable 6 = vs3 !Variablename in Elmer
  !Exported Variable 6 DOFS = Integer 1 !degrees of freedom 

end 
Solver 2
  Exec Solver = "Before simulation"
  !Exec Solver = "Before Timestep"
  Equation = "MapCoordinateInit"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"
  Active Coordinate = Integer 3
  Mesh Velocity Variable = String "dSdt 1"
  Mesh Update Variable = String "dS"
  Mesh Velocity First Zero = Logical True
  !!Top Surface Variable Name = String "Zs"
  Top Surface Variable Name = String "FS"
  Bottom Surface Variable Name = String "Zb"
End
Solver 3
  Exec Solver = "Before Timestep"
  !Exec Solver = "Never"
  Equation = "HeightDepth"
  Procedure = "StructuredProjectToPlane" "StructuredProjectToPlane"
  Active Coordinate = Integer 3
  Operator 1 = depth
  Operator 2 = height
End

Solver 4
  ! Exec Solver = never
   Equation = "Normal vector"
   Variable = "Normal Vector"   
   ! in 3dimensional simulations we have 3 entries
   Variable DOFs = 3 
   !NB: does not need to actually solve a matrix
   !    hence no BW optimization needed
   Optimize Bandwidth = Logical False 
!   Procedure = "ComputeNormal" "ComputeNormalSolver"
   Procedure = "ElmerIceSolvers" "ComputeNormalSolver"
   ! if set to True, all boundary normals would be computed by default
   ComputeAll = Logical False
End
Solver 5
  !Exec Solver = never
  Equation = "Navier-Stokes"
  Linear System Solver = Direct     
 
  !Replace UMFPACK with MUMPS IF you are using
  !multiple partitions 
  Linear System Direct Method = cPardiso
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-3 !8
  Linear System Max Iterations = 500
  Linear System Residual Output = 500
  Linear System Abort Not Converged = True
 
  Nonlinear System Max Iterations = 100
  Nonlinear System Convergence Tolerance  = 1.0e-6
  Nonlinear System Newton After Iterations = 100  
  Nonlinear System Newton After Tolerance = 1.0e-04
  Nonlinear System Relaxation Factor = 1.00
  Nonlinear System Reset Newton = Logical True
    
  Steady State Convergence Tolerance = Real 1.0e-4

  !Stabilization Method = String Bubbles
  Stabilization Method = String Stabilized

  !Exported Variable 1 = Flow Solution Loads[Stress Vector:2 CEQ Residual:1] 
  Exported Variable 1 = -dofs 1 "Zs"
  Exported Variable 2 = -dofs 1 "Zb"
  Exported Variable 3 = -dofs 1 "dS"
  Exported Variable 4 = -dofs 1 "dSdt"
  
  !Calculate Loads = Logical True

  Flow Model = String "Stokes"
End

!Solver 6 
!  Equation = Sij
!  !Exec Solver = never
!  Variable = -nooutput "Sij"
!  Variable DOFs = 1

!  Procedure = "ElmerIceSolvers" "ComputeDevStress"

!  Flow Solver Name = String "Flow Solution"
!  Stress Variable Name = String "Stress"
!  Exported Variable 1 = -dofs 6 "Stress"
!  Linear System Solver = Direct         
!  Linear System Direct Method = cPardiso
!End

Solver 6
  !Exec Solver = never
  Equation = "Free Surface Top"
  Variable = "FS"

  Variable DOFs = 1
  Exported Variable 1 = "FS Residual"
  Exported Variable 1 DOFs = 1
  Exported Variable 2 = ReferenceFS
  Exported Variable 2 DOFS = 1
  !Exported Variable 3 = FS
  !Exported Variable 3 DOFS = 1

  Procedure =  "FreeSurfaceSolver" "FreeSurfaceSolver"

  Linear System Solver = Iterative
  Linear System Max Iterations = 1500
  Linear System Iterative Method = BiCGStab
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-5
  Linear System Abort Not Converged = False
  Linear System Residual Output = 1

  Linear System Use Hypre = Logical False

  Nonlinear System Max Iterations = 100
  Nonlinear System Convergence Tolerance  = 1.0e-6
  Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = 1.0e-03

  Stabilization Method = Stabilized
  Apply Dirichlet = Logical True
  Flow Solution Name = String "Flow Solution"
! How much the free surface is relaxed
!  Relaxation Factor = Real 1.0
End

Solver 7
   !Exec Solver = After Timestep
   Exec Solver = "Never"
   Equation = Saveinflux
   Procedure = File "SaveData" "SaveMaterials"
   !Filename = File "$namerun"_inputflux.dat"
   !Output Directory = './results'

   !Variable = String -nooutput dummyvar
   !Variable DOFs = 1
   Body Force Parameters = Integer 1   
   Parameter 1 = String "Hydraulic Potential Volume Source"
   
End

Solver 8
  !Exec Solver = After TimeStep ! or whenever you want
  Exec Solver = "Never"
  Equation = SaveMeltFlux
  Procedure = "SaveData" "SaveScalars"
  Filename =  file $namerun".meltsource.txt"
  Output Directory = ./results
  Parallel Reduce = Logical True
  Variable 1 = String "Hydraulic Potential Volume Source"
  Operator 1 = String "mean"
  !Variable 1 = String "Flow Solution" ! just a dummy
  !Operator 1 = String "Volume"
  !Mask Name 2 = String "Save Flux"
  !Variable 2 = String "Flow Solution"
  !Operator 2 = String "Convective flux"
End

Solver 9

  Equation = "save boundary"
  Procedure = File "SaveData" "SaveBoundaryValues"

  Variable = String -nooutput dummyvar7

  Parameter 1 = String "Moulin Flux"
  Parameter 2 = String "External Pressure"

!Body Force Parameters Integer
!The user may also save parameters given in body force section by giving the number of these
!parameters by this keyword. Note that the body force parameters must be first in the list followed
!by the material parameters. The default is zero.
End
Solver 10
  Equation = "Mesh Update"
  !Exec Solver = Never
  Exec Solver = "after timestep"

  Linear System Solver = Iterative
  Linear System Max Iterations = 500
  Linear System Iterative Method = BiCGStab
  Linear System Preconditioning = ILU0
  Linear System Convergence Tolerance = Real 1.0e-6
  Steady State Convergence Tolerance = 1.0e-04
  Linear System Residual Output = 1
  Optimize Bandwidth = Logical False
  
End

!---------------------------------------------------
!---------------- EQUATIONS ------------------------
!---------------------------------------------------
! Equation for the ice
Equation 1
  Active Solvers(6) = 2 3 4 5 9 10
  Flow Solution Name = String "Flow Solution"
  Convection = String Computed
End
! For subglacial hydrology
Equation 2
  Active Solvers(3) = 1 7 8
End
Equation 3
!surface
  Active Solvers(1) = 6
  Flow Solution Name = String "Flow Solution"
  Convection = Computed
End


!---------------------------------------------------
!---------------- BOUNDARY CONDITIONS --------------
!---------------------------------------------------

Boundary Condition 1
  Name = "Sides"
  Target Boundaries(2) = 1 3   
  No Channel BC = Logical True
 
  ! free slip, no penetration, hydrostatic pressure
  ! -----------------------------------------------
  !Normal-Tangential Velocity = True
 
  !Velocity 1 = 0
  !Velocity 2 = 0
  !Velocity 3 = 0
  Flow Force BC = True
  Velocity 2 = Real 0.0 ! y direction
  ! use a linear sliding law with a high sliding coeffecient 
  Slip Coefficient 1  = Real $Cfriction
  Slip Coefficient 3  = Real $Cfriction

  !! making the front advance (try later)
  ComputeNormal = Logical False
  !Mesh Update 1 = Variable Mesh Update 1, Velocity 1
  !     Real MATC "tangentialupdate(tx)"
 
  !Mesh Update 2 = Variable Mesh Update 1, Velocity 2
   !    Real MATC "tangentialupdate(tx)"
  !Mesh Update 1 = Real 0.0
  Mesh Update 2 = Real 0.0
  !Mesh Update 3 = Real 0.0
  
  Mass Consistent Normals = Logical True ! no mass coming in or there is mass coming in?  
End

Boundary Condition 2
  Name = "Dam"
  Target Boundaries(1) = 2
  !Normal-Tangential Velocity = True
  ComputeNormal = Logical True ! added 29.09.23
  Flow Force BC = True
  No Channel BC = Logical True
 
  !Velocity 1 = 0
  !Velocity 2 = 0
  !Velocity 3 = 0
  Normal Pressure = Variable depth
  	 Real MATC "-1.0*tx*910.0*1.0E-06*9.18" ! in mPa
  !Mesh Update 1 = 0.0
  !Mesh Update 2 = 0.0
  Mesh Update 1 = Real 0.0
  !Mesh Update 2 = Real 0.0
 ! Mesh Update 3 = Real 0.0
  
 
End

Boundary Condition 3
  !Body Id = 4
  Name = "front"
  Target Boundaries(1) = 4
  !Hydraulic Potential = Real 0.0
  No Channel BC = Logical True
  ComputeNormal = Logical False
  !! making the front advance (try later)
  Mesh Update 1 = Variable Mesh Update 1, Velocity 1
       Real MATC "tangentialupdate(tx)"
  
  Mesh Update 2 = Variable Mesh Update 2, Velocity 2
       Real MATC "tangentialupdate(tx)"
  Mesh Update 3  = Variable FS, ReferenceFS
    Real MATC "tx(0) - tx(1)"
  !Mesh Update 1 = Real 0.0
  !Mesh Update 2 = Real 0.0
  !Mesh Update 3 = Real 0.0
  
End
!
! the order of the two following boundaries is important
! first the bed and then the surface
! they have to come after the last targeted boundary (from the mesh.boundary file)

Boundary Condition 4
  Name = "bed"
  Body Id = 2

  height = Real 0.0
  ComputeNormal = Logical True ! added 23.08.23
  Mass Consistent Normals = Logical True ! added 29.09.23
  Normal-Tangential Velocity = Logical True 
  Flow Force BC = Logical True
  
  !External Pressure = Variable pw_interpolated
  !	   Real MATC "-1.0*gethydropressure(tx)"
  
   
  Velocity 1 = Real 0.0
  
  Slip Coefficient 2 =  Variable Coordinate 1
    Real Procedure "ElmerIceUSF" "Friction_Coulomb"
  Slip Coefficient 3 =  Variable Coordinate 1
    Real Procedure "ElmerIceUSF" "Friction_Coulomb"
    
  !! Parameters needed for the Coulomb Friction Law
  Friction Law Sliding Coefficient = Real 3.0e5    !5.5e03 the bigger the slipperier  
  Friction Law Post-Peak Exponent  = Real 1.0      !(q=1)
  Friction Law Maximum Value = Real 1.0            !(C=1)
  Friction Law PowerLaw Exponent = Real 3.0        !(m = n = 3 Glen's law) 
  Friction Law Linear Velocity = Real 0.001   
  
   !Mesh Update 1 = Variable Mesh Update 1, Velocity 1
   !    Real MATC "tangentialupdate(tx)"
   !Mesh Update 2 = Variable Mesh Update 2, Velocity 2
   !    Real MATC "tangentialupdate(tx)"

  !Mesh Update 1 = Real 0.0
  !Mesh Update 2 = Real 0.0
  Mesh Update 3 = Real 0.0
  
End

Boundary Condition 5
  Name = "surface"
  Body Id = 3
  depth = Real 0.0
  Free Surface Top = Logical True
  !Top Surface = Equals FS
  ComputeNormal = Logical True
  !! try later
  !Mesh Update 1 = Variable Mesh Update 1, Velocity 1
  !     Real MATC "tangentialupdate(tx)"
  !Mesh Update 2 = Variable Mesh Update 2, Velocity 2
  !     Real MATC "tangentialupdate(tx)"
  Mesh Update 3  = Variable FS, ReferenceFS
    Real MATC "tx(0) - tx(1)"

  
End

